{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Ejercicios_semana_2 (2).ipynb",
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/MarielaBidondo/DS2020/blob/main/Semana2%20Python\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LEcKrCpD_jDM"
      },
      "source": [
        "**NOTA PARA ESTOS EJERCICIOS. INTRODUCIR DOCUMENTACION EN CADA FUNCION DESCRIBIENDO LO QUE HACE CADA UNA DE ELLAS. EJEMPLO:**\n",
        "\n",
        "\n",
        "\n",
        "```\n",
        "# Tiene formato de código\n",
        "def formula_cuadratica(a, b, c):\n",
        "    \"\"\"Resuelve una ecuación cuadrática.\n",
        "\n",
        "    Devuelve en una tupla las dos raíces que resuelven la\n",
        "    ecuación cuadrática:\n",
        "    \n",
        "        ax^2 + bx + c = 0.\n",
        "\n",
        "    Parámetros de entrada:\n",
        "    a -- coeficiente cuadrático (debe ser distinto de 0)\n",
        "    b -- coeficiente lineal\n",
        "    c -- término independiente\n",
        "    \n",
        "    \"\"\"\n",
        "```\n",
        "\n",
        "\n",
        "DE IGUAL MANERA PARA EL EJERCICIO DE POO:\n",
        "\n",
        "\n",
        "\n",
        "```\n",
        "# Tiene formato de código\n",
        "\n",
        "class ClaseEjemplo:\n",
        "    \"\"\"Documentación de la clase\"\"\"\n",
        "    def metodo(self):\n",
        "        \"\"\"Documentación del método\"\"\"\n",
        "```\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fgC4m4nFw80G"
      },
      "source": [
        "\n",
        "Vamos a crear un programa que lea los resultados de los partidos de la liga española en el año 2019-2020, y nos devuelva información sobre estos datos. El fichero está subido junto con los ejercicios.\n",
        "\n",
        "El programa ofrecerá un menú, para seleccionar la información deseada:\n",
        "\n",
        "**Estadística de un equipo**: Nos pide por teclado el nombre de un equipo y nos muestra el número de goles que ha metido, los paridos ganados, perdidos y empatados.\n",
        "\n",
        "**Nombres de equipos**: Nos muestra la lista de equipos que juegan.\n",
        "\n",
        "**Clasificación de la liga**: Nos muestra los tres primeros equipos de la liga.\n",
        "\n",
        "**Quiniela por fecha:** Introducimos una fecha y nos dice los resultados de la quiniela de ese día.\n",
        "\n",
        "Salir\n",
        "\n",
        "\n",
        "-----------------------------\n",
        "\n",
        "\n",
        "Para realizar este programa podemos realizar las siguientes funciones:\n",
        "\n",
        "**menu()**: Muestra el menú y devuelve un entero con la opción escogida.\n",
        "\n",
        "**LeerPartidos()**: Función que lee el fichero y devuelve una lista con los partidos (cada partido se va a guardar en un diccionario).\n",
        "\n",
        "**SumarGoles(equipo)**: Función que recibe un nombre de un equipo y devuelve el total de goles metidos.\n",
        "\n",
        "**InfoEquipos(equipo)**: Función que recibe un nombre de un equipo y devuelve una lista con los paridos ganados, perdidos y empatados.\n",
        "\n",
        "**Equipos()**: Función que devuelve una lista con todos los equipos.\n",
        "\n",
        "**Quiniela(dia,mes,año)**: Función que recibe el día, el mes y el año. Y devuelve una lista con los partidos y resultados de la quiniela."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jspMfi7Q0X1n"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fOJFepe30YC7"
      },
      "source": [
        "2.. En este ejercicio vamos a crear un programa de creación y consulta de BBDD sobre ficheros. Temática concesionarios.\n",
        "\n",
        "La estructura de ficheros será la siguiente:\n",
        "\n",
        "Fichero principal:\n",
        "\n",
        "**Nombre del concesionario.**\n",
        "\n",
        "**Ciudad de ubicación.**\n",
        "\n",
        "**Fichero .csv con la información de los coches para ese concesionario.** \n",
        "\n",
        "Fichero de cada concesionario:\n",
        "\n",
        "**Matrícula**\n",
        "\n",
        "**Marca**\n",
        "\n",
        "**Precio**\n",
        "\n",
        "**Tipo de vehículo (sedan, deportivo, sub...)**\n",
        "\n",
        "\n",
        "Se debe poder realizar las siguientes tareas:\n",
        "\n",
        "1. Funcion crear concesionario (pedirá introducir varios vehículos)\n",
        "2. Función crear fichero principal (pedirá introducir un único indice de concesionarios)\n",
        "3. consultar concesionario\n",
        "4. consultar por marca\n",
        "5. consultar por precio\n",
        "6. consultar por tipo\n",
        "7. consultar el de menor precio\n",
        "8. Indicar el número de coches dispobible que se tiene de algún tipo de coche\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZLzqv7UuCm6J"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MltJp_oRDK2U"
      },
      "source": [
        " "
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "c4f9TEeR_h4k"
      },
      "source": [
        "Editar el ejercicio anterior, para trabajar con POO en lugar de con ficheros.\n",
        "\n",
        "Tendrán que existir 3 clases:\n",
        "\n",
        "La clase vehiculo, que tendrá todas las características de cada vehículo anteriormente mencionadas.\n",
        "\n",
        "La clase concesionario, que tendrá una lista de vehículos, así como información sobre su nombre, localización, etc.\n",
        "\n",
        "La clase indice que contendrá una lista de todos los concesionarios de España.\n",
        "\n",
        "Se deberán implementar los metodos get y set para acceder o asignar los atributos de una clase.\n",
        "\n",
        "Elaborar los métodos necesarios para cada clase para poder reutilizar el mismo menu:\n",
        "\n",
        "1. crear concesionario (se reclamarán N coches) \n",
        "2. crear indice principal (Se reclamará una lista de concesionarios)\n",
        "3. consultar concesionario\n",
        "4. consultar por marca\n",
        "5. consultar por precio\n",
        "6. consultar por tipo\n",
        "7. consultar el de menor precio\n",
        "8. Indicar el número de coches dispobible que se tiene de algún tipo de coche\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ]
    }
  ]
}